{ pkgs ? import <nixpkgs> {} }:
rec {
    generateSrcFromSpec = { specification, generatorName, srcOverrides ? { ... }: {} } :
        let
            default-src = {
                #inherit attrs;

                name = "${generatorName}-openapi-generated-source";
                # vesion = "0.1"; # TODO
                nativeBuildInputs = with pkgs; [ openapi-generator-cli ];

                buildPhase = ''
                    ${pkgs.openapi-generator-cli}/bin/openapi-generator-cli generate -i ${specification} -g ${generatorName}
                '';

                installPhase = ''
                    cp -r . $out
                '';

                dontUnpack = true;
            };
        in
            pkgs.stdenv.mkDerivation (default-src // srcOverrides default-src);

    createGenerator = { generatorName, dontBuildBinaryReason ? null, binaryOverrides ? { ... }: {}, binaryBuilder ? pkgs.stdenv.mkDerivation, srcOverrides ? { ... }: {}, ... } : { specification } :
        let
            generated-src = generateSrcFromSpec {
                inherit specification generatorName srcOverrides;
            };
            default-binary = {
                name = "${generatorName}-openapi-generated-lib";
                src = generated-src;
            };
        in
        rec {
            inherit generated-src generatorName dontBuildBinaryReason;
            binary =
                if dontBuildBinaryReason == null then
                    binaryBuilder (default-binary // (binaryOverrides default-binary))
                else
                    throw ''
                        The "${generatorName}" OpenAPI generator doesn't support building binaries from source generated by the generator.

                        Explanation why "${generatorName}" doesn't support building:
                          ${builtins.replaceStrings ["\n"] ["\n  "] dontBuildBinaryReason }
                    '';
        };

    createGeneratorsSet = generators:
        (builtins.mapAttrs
            (name: value: createGenerator (
                value // {
                    generatorName = name;
                }
            )))
            generators;

    generators = createGeneratorsSet {
        "cpp-qt-client" = {
            binaryOverrides = { src, ... } : {
                nativeBuildInputs = with pkgs; [ cmake libsForQt5.qtbase libsForQt5.wrapQtAppsHook ];
                src = "${src}/client";
            };
        };
        "rust" = {
            dontBuildBinaryReason = ''
                Rust libraries are almost always built from source by the user - Rust libraries are not often obtained as binaries.
                You should use the generated source instead.
            '';
            /*binaryOverrides = { src, ... } : {
                nativeBuildInputs = with pkgs; [ pkg-config ];
                buildInputs = with pkgs; [ openssl ];
                #src = "${src}/client";
                cargoSha256 = "sha256-sHBIalZTEv/zy6Y8E1FOoDrj2G+uRRaUH3kgSSqOVRE=";
            };*/

            srcOverrides = { buildPhase ? "", ... } : {
                buildPhase = "
                    ${buildPhase}
                    cp ${pkgs.writeText "cargo-lock-for-openapi-rust" ((import generators/rust/Cargo.lock.nix) {})} ./Cargo.lock";
            };

            binaryBuilder = pkgs.rustPlatform.buildRustPackage;
        };
    };

    generators-old = {
        "cpp-qt-client" = createGenerator {
            generatorName = "cpp-qt-client";
            binaryOverrides = { src, ... } : {
                nativeBuildInputs = with pkgs; [ cmake libsForQt5.wrapQtAppsHook ];
                buildInputs = with pkgs; [ libsForQt5.qtbase ];
                src = "${src}/client";
            };
        };
    };
}
