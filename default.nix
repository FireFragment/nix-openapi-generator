{ pkgs ? import <nixpkgs> {} }:
let

    # Generate source code from an OpenAPI specification
    generateSrcFromSpec = { specification, generatorName, srcOverrides ? { ... }: {} } :
        let
            default-src = {
                #inherit attrs;

                name = "${generatorName}-openapi-generated-source";
                # vesion = "0.1"; # TODO
                nativeBuildInputs = with pkgs; [ openapi-generator-cli ];

                buildPhase = ''
                    ${pkgs.openapi-generator-cli}/bin/openapi-generator-cli generate -i ${specification} -g ${generatorName}
                '';

                installPhase = ''
                    cp -r . $out
                '';

                dontUnpack = true;
            };
        in spkgs.stdenv.mkDerivation (default-src // srcOverrides default-src);

    createGeneratorsSet = generators:
        (builtins.mapAttrs
            (name: value: createGenerator (
                value // {
                    generatorName = name;
                }
            )))
            generators;
in rec {
    createGenerator = { generatorName, dontBuildBinaryReason ? null, binaryOverrides ? { ... }: {}, binaryBuilder ? pkgs.stdenv.mkDerivation, srcOverrides ? { ... }: {}, ... } : { specification } :
        let
            sourceCode = generateSrcFromSpec {
                inherit specification generatorName srcOverrides;
            };
            default-binary = {
                name = "${generatorName}-openapi-generated-lib";
                src = sourceCode;
            };
        in
        rec {
            inherit sourceCode generatorName dontBuildBinaryReason;
            binary =
                if dontBuildBinaryReason == null then
                    binaryBuilder (default-binary // (binaryOverrides default-binary))
                else
                    throw ''
                        The "${generatorName}" OpenAPI generator doesn't support building binaries from source generated by the generator.

                        Explanation why "${generatorName}" doesn't support building:
                          ${builtins.replaceStrings ["\n"] ["\n  "] dontBuildBinaryReason }
                    '';
        };

    generators = createGeneratorsSet
        (builtins.mapAttrs
            (name: fs_item_type: import (./. + ("/generators/" + name)) { inherit pkgs; })
            (pkgs.lib.attrsets.filterAttrs
                (name: fs_item_type: fs_item_type == "directory")
                (builtins.readDir ./generators)));

    getGenerator = name:
        if builtins.hasAttr name generators then
            generators.${name}
        else
            createGenerator {
                generatorName = name;
                dontBuildBinaryReason = ''
                    Building source code generated by the ${name} generator is not yet supported.
                '';
            };
}
